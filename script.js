/**
 * Airline Manager Pro
 * Jogo de simulação de gerenciamento de companhia aérea.
 * @version 1.9 - Expansão Final e Documentação Completa
 */
document.addEventListener('DOMContentLoaded', () => {

    // -----------------------------------------------------------------------------
    // PARTE 1: ESTADO INICIAL, DADOS E VARIÁVEIS GLOBAIS
    // -----------------------------------------------------------------------------

    /**
     * Cria e retorna o estado inicial para um novo jogo.
     * @returns {object} O objeto de estado do jogo.
     */
    function createInitialGameState() {
        return {
            companyName: "Minha Companhia",
            money: 350000,
            totalHours: 0,
            planes: [],
            routes: [],
            activeFlights: [],
            hubs: ['GRU'],
            reputation: 100,
            nextEventCheck: 24 * 7,
            loans: [],
            financials: { revenue: 0, expenses: { fuel: 0, maintenance: 0, interest: 0, salaries: 0, landingFees: 0 } },
            marketEvents: [],
            staff: { pilots: [], crew: [] },
            upgrades: { fuelEfficiency: false, advancedMaintenance: false, premiumService: false },
            flightHistory: [],
            competitors: [],
            airportSlots: { 'GRU': 4 },
            usedMarketPlanes: [],
            allianceMember: null,
        };
    }

    let gameState = createInitialGameState();
    let planeIdCounter = 0;
    let loanIdCounter = 0;
    let staffIdCounter = 0;
    let usedPlaneIdCounter = 0;
    let gameInterval = null;
    const SAVE_KEY = 'airlineManagerSaveData';

    // --- DADOS FIXOS DO JOGO ---

    const AIRPORTS = {
        'GRU': { name: 'São Paulo', size: 'Large', slotCost: 100000, landingFee: 5000, hubAlliance: 'sky_team' },
        'GIG': { name: 'Rio de Janeiro', size: 'Large', slotCost: 90000, landingFee: 4500 },
        'BSB': { name: 'Brasília', size: 'Medium', slotCost: 60000, landingFee: 3000 },
        'SSA': { name: 'Salvador', size: 'Medium', slotCost: 55000, landingFee: 2800 },
        'MAO': { name: 'Manaus', size: 'Medium', slotCost: 45000, landingFee: 2500 },
        'CNF': { name: 'Belo Horizonte', size: 'Medium', slotCost: 50000, landingFee: 2700 },
        'EZE': { name: 'Buenos Aires', size: 'Large', slotCost: 85000, landingFee: 4200 },
        'SCL': { name: 'Santiago', size: 'Large', slotCost: 88000, landingFee: 4400 },
        'MIA': { name: 'Miami', size: 'Hub', slotCost: 200000, landingFee: 8000, hubAlliance: 'one_world' },
        'LIS': { name: 'Lisboa', size: 'Hub', slotCost: 180000, landingFee: 7500, hubAlliance: 'star_alliance' },
        'CDG': { name: 'Paris', size: 'Hub', slotCost: 220000, landingFee: 9000, hubAlliance: 'sky_team' },
        'DXB': { name: 'Dubai', size: 'Hub', slotCost: 300000, landingFee: 12000, hubAlliance: 'none' },
    };
    const AIRCRAFT_MARKET = [
        { name: "Cessna 172", speed: 220, range: 1200, capacity: 3, price: 80000, maintenance: 100, fuelPerKm: 0.3, comfort: 20 },
        { name: "Dash 8 Q400", speed: 670, range: 2000, capacity: 78, price: 200000, maintenance: 750, fuelPerKm: 0.7, comfort: 45 },
        { name: "ATR 72", speed: 510, range: 1500, capacity: 70, price: 250000, maintenance: 800, fuelPerKm: 0.8, comfort: 40 },
        { name: "Embraer E175", speed: 820, range: 3700, capacity: 88, price: 600000, maintenance: 1800, fuelPerKm: 1.1, comfort: 78 },
        { name: "Embraer E195-E2", speed: 870, range: 4800, capacity: 132, price: 750000, maintenance: 2200, fuelPerKm: 1.3, comfort: 75 },
        { name: "Boeing 737", speed: 840, range: 5500, capacity: 160, price: 800000, maintenance: 2500, fuelPerKm: 1.5, comfort: 70 },
        { name: "Airbus A320", speed: 870, range: 6100, capacity: 180, price: 1000000, maintenance: 3000, fuelPerKm: 1.6, comfort: 72 },
        { name: "Boeing 787", speed: 910, range: 14000, capacity: 250, price: 2500000, maintenance: 6000, fuelPerKm: 2.2, comfort: 90 },
        { name: "MD-11", speed: 880, range: 12000, capacity: 290, price: 3000000, maintenance: 7500, fuelPerKm: 2.8, comfort: 80 },
        { name: "Airbus A350", speed: 900, range: 15000, capacity: 325, price: 4000000, maintenance: 8500, fuelPerKm: 2.5, comfort: 92 },
        { name: "Boeing 747", speed: 920, range: 14800, capacity: 410, price: 5000000, maintenance: 9000, fuelPerKm: 3.5, comfort: 85 },
        { name: "Airbus A380", speed: 940, range: 15200, capacity: 550, price: 8000000, maintenance: 12000, fuelPerKm: 4.1, comfort: 95 },
        { name: "Concorde SST", speed: 2180, range: 7200, capacity: 100, price: 15000000, maintenance: 25000, fuelPerKm: 8.5, comfort: 60 },
    ];
    const AVAILABLE_ROUTES = [
        { id: 'GRU-GIG', from: 'GRU', to: 'GIG', distance: 430, baseDemand: 1.2, baseTicketPrice: 200, unlockCost: 10000 },
        { id: 'GRU-BSB', from: 'GRU', to: 'BSB', distance: 1000, baseDemand: 1.0, baseTicketPrice: 450, unlockCost: 30000 },
        { id: 'GRU-SSA', from: 'GRU', to: 'SSA', distance: 1960, baseDemand: 0.9, baseTicketPrice: 700, unlockCost: 50000 },
        { id: 'GRU-MAO', from: 'GRU', to: 'MAO', distance: 2700, baseDemand: 0.8, baseTicketPrice: 950, unlockCost: 80000 },
        { id: 'GIG-CNF', from: 'GIG', to: 'CNF', distance: 440, baseDemand: 1.1, baseTicketPrice: 220, unlockCost: 12000 },
        { id: 'GRU-EZE', from: 'GRU', to: 'EZE', distance: 1700, baseDemand: 1.0, baseTicketPrice: 650, unlockCost: 45000 },
        { id: 'GRU-SCL', from: 'GRU', to: 'SCL', distance: 2600, baseDemand: 0.9, baseTicketPrice: 850, unlockCost: 75000 },
        { id: 'GRU-MIA', from: 'GRU', to: 'MIA', distance: 6500, baseDemand: 0.7, baseTicketPrice: 2500, unlockCost: 150000, isHubRoute: true },
        { id: 'GRU-LIS', from: 'GRU', to: 'LIS', distance: 7900, baseDemand: 0.6, baseTicketPrice: 3200, unlockCost: 180000, isHubRoute: true },
        { id: 'GIG-CDG', from: 'GIG', to: 'CDG', distance: 9150, baseDemand: 0.6, baseTicketPrice: 3500, unlockCost: 200000, isHubRoute: true },
        { id: 'MIA-DXB', from: 'MIA', to: 'DXB', distance: 12500, baseDemand: 0.5, baseTicketPrice: 5000, unlockCost: 300000, isHubRoute: true },
    ];
    const ALLIANCES = [
        { id: 'star_alliance', name: 'Aliança Estelar', fee: 5000000, requirements: { reputation: 120, fleetSize: 10, intlRoutes: 1 }, description: "A maior e mais prestigiada aliança, oferecendo descontos significativos nas taxas de pouso em hubs de membros." },
        { id: 'one_world', name: 'Mundo Unido', fee: 3500000, requirements: { reputation: 110, fleetSize: 8, intlRoutes: 1 }, description: "Uma aliança focada em serviço premium e rotas de negócios, oferece um bônus de reputação." },
        { id: 'sky_team', name: 'Time Celeste', fee: 2000000, requirements: { reputation: 100, fleetSize: 5 }, description: "Uma aliança mais acessível, ideal para companhias em crescimento, focada em rotas regionais e domésticas." }
    ];
    const LOAN_OPTIONS = [ { id: 1, amount: 100000, dailyInterestRate: 0.002, termDays: 30 }, { id: 2, amount: 500000, dailyInterestRate: 0.0018, termDays: 60 }, { id: 3, amount: 2000000, dailyInterestRate: 0.0015, termDays: 120 }, ];
    const STAFF_MARKET = [ { id: 101, name: "João Silva", type: 'pilot', skill: 'Novato', salary: 4000, bonus: 0 }, { id: 102, name: "Maria Oliveira", type: 'pilot', skill: 'Experiente', salary: 7000, bonus: 0.02 }, { id: 103, name: "Carlos Pereira", type: 'pilot', skill: 'Veterano', salary: 11000, bonus: 0.05 }, { id: 104, name: "Pedro Almeida", type: 'pilot', skill: 'Experiente', salary: 7200, bonus: 0.02 }, { id: 201, name: "Ana Souza", type: 'crew', skill: 'Novato', salary: 2000, bonus: 5 }, { id: 202, name: "Lucas Fernandes", type: 'crew', skill: 'Experiente', salary: 3500, bonus: 10 }, { id: 203, name: "Juliana Costa", type: 'crew', skill: 'Veterano', salary: 5000, bonus: 15 }, { id: 204, name: "Beatriz Lima", type: 'crew', skill: 'Experiente', salary: 3600, bonus: 10 }, ];
    const UPGRADES_DATA = [ { id: 'fuelEfficiency', name: "Programa de Eficiência de Combustível", cost: 1000000, description: "Implementa novas tecnologias e treinamento para reduzir o consumo de combustível em 5% em toda a frota." }, { id: 'advancedMaintenance', name: "Equipe de Manutenção Avançada", cost: 750000, description: "Reduz a duração e o custo de eventos de manutenção aleatórios em 20%." }, { id: 'premiumService', name: "Serviços de Bordo Aprimorados", cost: 500000, description: "Aumenta o conforto base de todas as aeronaves, melhorando a satisfação dos passageiros." } ];
    const AIRCRAFT_REQUIREMENTS = { "Cessna 172": { pilots: 1, crew: 0 }, "Dash 8 Q400": { pilots: 2, crew: 2 }, "ATR 72": { pilots: 2, crew: 2 }, "Embraer E175": { pilots: 2, crew: 2 }, "Embraer E195-E2": { pilots: 2, crew: 3 }, "Boeing 737": { pilots: 2, crew: 4 }, "Airbus A320": { pilots: 2, crew: 4 }, "MD-11": { pilots: 2, crew: 6 }, "Boeing 787": { pilots: 2, crew: 6 }, "Airbus A350": { pilots: 2, crew: 7 }, "Boeing 747": { pilots: 2, crew: 8 }, "Airbus A380": { pilots: 2, crew: 10 }, "Concorde SST": { pilots: 2, crew: 5 }, };
    const COMPETITORS_DATA = [ { id: 1, name: "VoaBrasil", money: 500000, planes: [], routes: [], competitiveness: 60, expansionAggressiveness: 0.1 }, { id: 2, name: "Ponte Aérea S.A.", money: 400000, planes: [], routes: [], competitiveness: 50, expansionAggressiveness: 0.07 }, ];
    const HUB_BONUS = 1.1;
    const NEWS_TICKER_DATA = [ "Preço do querosene de aviação atinge alta histórica...", "Nova tecnologia de motores promete revolucionar a eficiência de combustível...", "Companhia Aérea rival 'Voa Rápido' anuncia expansão agressiva...", "Congresso debate novas regulações de segurança para o espaço aéreo...", "Turismo em Miami bate recorde no último trimestre...", "Boeing e Airbus competem pelo lançamento de nova aeronave...", "Greve de controladores de tráfego aéreo na Europa causa caos...", ];

    // --- Seletores de Elementos do DOM ---
    const mainMenuModal = document.getElementById('main-menu-modal');
    const newGameModal = document.getElementById('new-game-modal');
    const continueGameBtn = document.getElementById('continue-game-btn');
    const newGameBtn = document.getElementById('new-game-btn');
    const companyNameInput = document.getElementById('company-name-input');
    const startGameBtn = document.getElementById('start-game-btn');
    const companyNameDisplay = document.getElementById('company-name-display');
    const moneyDisplay = document.getElementById('money-display');
    const reputationDisplay = document.getElementById('reputation-display');
    const timeDisplay = document.getElementById('time-display');
    const fleetList = document.getElementById('fleet-list');
    const marketList = document.getElementById('market-list');
    const usedMarketList = document.getElementById('used-market-list');
    const routesList = document.getElementById('routes-list');
    const hubsList = document.getElementById('hubs-list');
    const airportsList = document.getElementById('airports-list');
    const logMessages = document.getElementById('log-messages');
    const overviewActiveFlights = document.getElementById('overview-active-flights');
    const marketEventsList = document.getElementById('market-events-list');
    const assignFlightModal = document.getElementById('assign-flight-modal');
    const modalRouteName = document.getElementById('modal-route-name');
    const modalAvailablePlanes = document.getElementById('modal-available-planes');
    const assignRouteModal = document.getElementById('assign-route-modal');
    const modalPlaneName = document.getElementById('modal-plane-name');
    const modalAvailableRoutes = document.getElementById('modal-available-routes');
    const financeReportModal = document.getElementById('finance-report-modal');
    const openFinanceReportBtn = document.getElementById('open-finance-report-btn');
    const bankLoansList = document.getElementById('bank-loans-list');
    const bankActiveLoans = document.getElementById('bank-active-loans');
    const navLinks = document.querySelectorAll('.nav-link');
    const pages = document.querySelectorAll('.page');
    const tabButtons = document.querySelectorAll('.tab-button');
    const gameWrapper = document.querySelector('.game-wrapper');
    const saveGameBtn = document.getElementById('save-game-btn');
    const restartGameBtn = document.getElementById('restart-game-btn');
    const confirmationModal = document.getElementById('confirmation-modal');
    const confirmTitle = document.getElementById('confirm-title');
    const confirmMessage = document.getElementById('confirm-message');
    const confirmYesBtn = document.getElementById('confirm-yes-btn');
    const confirmNoBtn = document.getElementById('confirm-no-btn');
    const staffSummary = document.getElementById('staff-summary');
    const myStaffList = document.getElementById('my-staff-list');
    const hireStaffList = document.getElementById('hire-staff-list');
    const upgradesList = document.getElementById('upgrades-list');
    const flightHistoryTable = document.getElementById('flight-history-table');
    const assignFlightRequirements = document.getElementById('assign-flight-requirements');
    const newsTickerText = document.getElementById('news-ticker-text');
    const competitorList = document.getElementById('competitor-list');
    const alliancesList = document.getElementById('alliances-list');
    const allianceInfo = document.getElementById('alliance-info');

    // --- FUNÇÕES DE UTILIDADE E CONFIRMAÇÃO ---
    function formatCurrency(value) { return `$${Math.round(value).toLocaleString()}`; }
    function getFormattedTime(totalHours = gameState.totalHours) { const day = Math.floor(totalHours / 24) + 1; const hour = totalHours % 24; return `Dia ${day}, ${hour.toString().padStart(2, '0')}:00`; }
    function showConfirmation(title, message) { return new Promise(resolve => { confirmTitle.textContent = title; confirmMessage.innerHTML = message; confirmationModal.style.display = 'flex'; const yesHandler = () => { confirmationModal.style.display = 'none'; confirmYesBtn.removeEventListener('click', yesHandler); confirmNoBtn.removeEventListener('click', noHandler); resolve(true); }; const noHandler = () => { confirmationModal.style.display = 'none'; confirmYesBtn.removeEventListener('click', yesHandler); confirmNoBtn.removeEventListener('click', noHandler); resolve(false); }; confirmYesBtn.addEventListener('click', yesHandler); confirmNoBtn.addEventListener('click', noHandler); }); }

    // --- FUNÇÕES DE RENDERIZAÇÃO ---
    function renderDashboard() { moneyDisplay.textContent = formatCurrency(gameState.money); reputationDisplay.textContent = gameState.reputation.toFixed(1); timeDisplay.textContent = getFormattedTime(); companyNameDisplay.textContent = gameState.companyName; }
    function renderOverview() { overviewActiveFlights.innerHTML = ''; if (gameState.activeFlights.length === 0) { overviewActiveFlights.innerHTML = '<p>Nenhum voo ativo no momento.</p>'; return; } gameState.activeFlights.forEach(flight => { const plane = gameState.planes.find(p => p.id === flight.planeId); if (plane) { const progress = ((gameState.totalHours - flight.startHour) / flight.durationInHours) * 100; overviewActiveFlights.innerHTML += `<div class="card"><h3>${plane.name} (ID: ${plane.id})</h3><div class="card-details"><span>Rota: ${AIRPORTS[flight.route.from].name} ➔ ${AIRPORTS[flight.route.to].name}</span><span>Chegada em: ${getFormattedTime(flight.endHour)}</span></div><div class="progress-bar-container"><div class="progress-bar" style="width: ${Math.min(100, progress)}%;"></div></div></div>`; } }); }
    function renderFleet() { fleetList.innerHTML = ''; if (gameState.planes.length === 0) { fleetList.innerHTML = '<p>Você ainda não possui aviões.</p>'; return; } gameState.planes.forEach(plane => { let statusHTML; let actionButton = ''; if (plane.status === 'flying') { const flight = gameState.activeFlights.find(f => f.planeId === plane.id); if (flight) { const progress = ((gameState.totalHours - flight.startHour) / flight.durationInHours) * 100; statusHTML = `<div class="status status-flying">Voando para ${AIRPORTS[flight.route.to].name}</div><div class="progress-bar-container"><div class="progress-bar" style="width: ${Math.min(100, progress)}%;"></div></div>`; } } else if (plane.status === 'maintenance') { const daysLeft = Math.ceil(plane.maintenanceTimer / 24); statusHTML = `<div class="status status-maintenance">Em manutenção (${daysLeft} dias restantes)</div>`; } else { statusHTML = `<div class="status status-idle">Ocioso</div>`; actionButton = `<button class="btn btn-assign btn-assign-from-fleet" data-plane-id="${plane.id}">Designar Voo</button> <button class="btn btn-restart sell-plane-btn" data-plane-id="${plane.id}" style="margin-top: 8px;">Vender Avião</button>`; } fleetList.innerHTML += `<div class="card"><h3>${plane.name} (ID: ${plane.id})</h3><div class="card-details"><span>Condição: ${plane.condition.toFixed(1)}% | Horas de Voo: ${plane.flightHours}h</span><span>Capacidade: ${plane.capacity}, Alcance: ${plane.range} km</span><span class="cost">Conforto: ${plane.comfort} / Custo Diário: ${formatCurrency(plane.maintenance)}</span></div>${statusHTML}${actionButton}</div>`; }); }
    function renderMarket() { marketList.innerHTML = ''; AIRCRAFT_MARKET.forEach(plane => { const canAfford = gameState.money >= plane.price; marketList.innerHTML += `<div class="card"><h3>${plane.name}</h3><div class="card-details"><span>Capacidade: ${plane.capacity}, Alcance: ${plane.range} km, Vel: ${plane.speed} km/h</span><span>Conforto: ${plane.comfort}</span><span class="price">Preço: ${formatCurrency(plane.price)}</span></div><button class="btn buy-plane-btn" data-plane-name="${plane.name}" ${canAfford ? '' : 'disabled'}>Comprar</button></div>`; }); }
    function renderUsedMarket() { usedMarketList.innerHTML = ''; if (gameState.usedMarketPlanes.length === 0) { usedMarketList.innerHTML = '<p>Nenhuma aeronave usada no mercado no momento. Volte mais tarde.</p>'; } gameState.usedMarketPlanes.forEach(plane => { const canAfford = gameState.money >= plane.price; usedMarketList.innerHTML += `<div class="card"><h3>${plane.name} (Usado)</h3><div class="card-details"><span>Condição: ${plane.condition.toFixed(1)}% | Horas de Voo: ${plane.flightHours}h</span><span>Capacidade: ${plane.capacity}, Alcance: ${plane.range} km</span><span class="price">Preço: ${formatCurrency(plane.price)}</span></div><button class="btn buy-used-plane-btn" data-used-plane-id="${plane.id}" ${canAfford ? '' : 'disabled'}>Comprar Usado</button></div>`; }); }
    function renderRoutes() { routesList.innerHTML = ''; AVAILABLE_ROUTES.filter(r => !r.isHubRoute).forEach(routeData => { const routeState = gameState.routes.find(r => r.id === routeData.id); const isUnlocked = !!routeState; const fromHub = gameState.hubs.includes(routeData.from); const routeCard = document.createElement('div'); if (isUnlocked) { routeCard.className = `card ${fromHub ? 'is-hub-route' : ''}`; const satisfaction = calculateSatisfaction(routeState); let satisfactionClass = 'low'; if (satisfaction >= 75) { satisfactionClass = 'high'; } else if (satisfaction >= 40) { satisfactionClass = 'medium'; } const competitorsOnRoute = gameState.competitors.filter(c => c.routes.includes(routeState.id)); const marketShare = getMarketShare(routeState, competitorsOnRoute); let competitorHTML = competitorsOnRoute.map(c => `<span class="competitor-tag">${c.name}</span>`).join(' '); routeCard.innerHTML = `<h3>${AIRPORTS[routeState.from].name} ➔ ${AIRPORTS[routeState.to].name} ${fromHub ? '⭐' : ''}</h3><div class="pricing-controls"><label>Preço da Passagem:</label><div><button class="change-price-btn" data-route-id="${routeState.id}" data-amount="-10">-</button><span>${formatCurrency(routeState.ticketPrice)}</span><button class="change-price-btn" data-route-id="${routeState.id}" data-amount="10">+</button></div></div><div class="satisfaction-bar-container"><label>Satisfação (${satisfaction}%) / Market Share (${(marketShare * 100).toFixed(0)}%)</label><div class="progress-bar-container"><div class="satisfaction-bar ${satisfactionClass}" style="width: ${(marketShare * 100)}%;"></div></div></div><div class="route-competition"><span class="route-competition-header">Operadores:</span> <div class="competitors-on-route"><span class="competitor-tag player">${gameState.companyName}</span>${competitorHTML}</div></div><button class="btn assign-btn" data-route-id="${routeState.id}" style="margin-top: 1rem;">Atribuir Voo</button>`; } else { routeCard.className = 'card'; const canAfford = gameState.money >= routeData.unlockCost; routeCard.innerHTML = `<h3>${AIRPORTS[routeData.from].name} ➔ ${AIRPORTS[routeData.to].name} (Bloqueada)</h3><div class="card-details"><span>Distância: ${routeData.distance} km</span><span class="price">Desbloquear: ${formatCurrency(routeData.unlockCost)}</span></div><button class="btn unlock-btn" data-route-id="${routeData.id}" ${canAfford ? '' : 'disabled'}>Desbloquear</button>`; } routesList.appendChild(routeCard); }); }
    function renderHubs() { hubsList.innerHTML = `<h4>Hubs Ativos: ${gameState.hubs.map(h => AIRPORTS[h].name).join(', ')}</h4><hr style="border-color: var(--border-color); margin: 1rem 0;">`; AVAILABLE_ROUTES.filter(r => r.isHubRoute).forEach(hubRoute => { const isUnlocked = gameState.routes.some(r => r.id === hubRoute.id); if (!isUnlocked) { const canAfford = gameState.money >= hubRoute.unlockCost; hubsList.innerHTML += `<div class="card"><h3>Rota de Hub: ${AIRPORTS[hubRoute.from].name} ➔ ${AIRPORTS[hubRoute.to].name}</h3><div class="card-details"><span>Desbloqueia operações a partir de um novo hub.</span><span class="price">Custo da Licença: ${formatCurrency(hubRoute.unlockCost)}</span></div><button class="btn unlock-btn" data-route-id="${hubRoute.id}" ${canAfford ? '' : 'disabled'}>Desbloquear Rota de Hub</button></div>`; } }); }
    function renderAirportsPage() { airportsList.innerHTML = ''; for (const airportId in AIRPORTS) { const airport = AIRPORTS[airportId]; const slotsOwned = gameState.airportSlots[airportId] || 0; airportsList.innerHTML += `<div class="card"><h3>${airport.name} (${airportId})</h3><div class="card-details"><span>Tamanho: ${airport.size}</span><span>Custo por Slot: ${formatCurrency(airport.slotCost)}</span><span>Slots Possuídos: <strong>${slotsOwned}</strong></span></div><button class="btn buy-slot-btn" data-airport-id="${airportId}" ${gameState.money < airport.slotCost ? 'disabled' : ''}>Comprar 1 Slot</button></div>`; } }
    function renderAlliancesPage() { if (gameState.allianceMember) { const alliance = ALLIANCES.find(a => a.id === gameState.allianceMember); allianceInfo.innerHTML = `<p>Você é membro da <strong>${alliance.name}</strong>!</p>`; allianceInfo.className = 'in-alliance'; } else { allianceInfo.innerHTML = `<p>Você não faz parte de nenhuma aliança.</p>`; allianceInfo.className = ''; } alliancesList.innerHTML = ''; ALLIANCES.forEach(alliance => { const canJoin = gameState.reputation >= alliance.requirements.reputation && gameState.planes.length >= alliance.requirements.fleetSize; alliancesList.innerHTML += `<div class="card"><h3>${alliance.name}</h3><p>${alliance.description}</p><ul><li>Requisitos: ${alliance.requirements.fleetSize} aviões, ${alliance.requirements.reputation} de reputação.</li></ul><div class="price">Taxa de Adesão: ${formatCurrency(alliance.fee)}</div><button class="btn join-alliance-btn" data-alliance-id="${alliance.id}" ${gameState.allianceMember || !canJoin || gameState.money < alliance.fee ? 'disabled' : ''}>${gameState.allianceMember ? 'Membro' : 'Juntar-se'}</button></div>`; }); }
    function renderBank() { bankLoansList.innerHTML = ''; LOAN_OPTIONS.forEach(loan => { const alreadyTaken = gameState.loans.some(l => l.loanId === loan.id); bankLoansList.innerHTML += `<div class="card"><h3>Empréstimo de ${formatCurrency(loan.amount)}</h3><div class="card-details"><span>Prazo: ${loan.termDays} dias</span><span>Juros Diários: ${(loan.dailyInterestRate * 100).toFixed(2)}%</span></div><button class="btn take-loan-btn" data-loan-id="${loan.id}" ${alreadyTaken ? 'disabled' : ''}>Pegar Empréstimo</button></div>`; }); bankActiveLoans.innerHTML = '<h4>Empréstimos Ativos:</h4>'; if (gameState.loans.length > 0) { gameState.loans.forEach(loan => { bankActiveLoans.innerHTML += `<div class="loan-item"><span>Valor Restante: <strong>${formatCurrency(loan.remainingAmount)}</strong></span><span>Pagamento Diário: ~${formatCurrency(loan.dailyPayment)}</span></div>`; }); } else { bankActiveLoans.innerHTML += '<p>Nenhum empréstimo ativo.</p>'; } }
    function renderFinanceReport() { const f = gameState.financials; const totalRevenue = f.revenue; const totalExpenses = Object.values(f.expenses).reduce((a, b) => a + b, 0); const netProfit = totalRevenue - totalExpenses; document.getElementById('finance-report-content').innerHTML = `<div class="finance-section"><h3>Receitas</h3><div class="finance-item"><span class="label">Voos de Passageiros:</span><span class="value positive">${formatCurrency(f.revenue)}</span></div></div><div class="finance-section"><h3>Despesas</h3><div class="finance-item"><span class="label">Combustível:</span><span class="value negative">${formatCurrency(f.expenses.fuel)}</span></div><div class="finance-item"><span class="label">Manutenção Diária:</span><span class="value negative">${formatCurrency(f.expenses.maintenance)}</span></div><div class="finance-item"><span class="label">Salários:</span><span class="value negative">${formatCurrency(f.expenses.salaries)}</span></div><div class="finance-item"><span class="label">Juros de Empréstimos:</span><span class="value negative">${formatCurrency(f.expenses.interest)}</span></div><div class="finance-item"><span class="label">Taxas de Pouso:</span><span class="value negative">${formatCurrency(f.expenses.landingFees)}</span></div></div><div class="finance-item finance-total"><span class="label">Lucro Líquido:</span><span class="value ${netProfit >= 0 ? 'positive' : 'negative'}">${formatCurrency(netProfit)}</span></div>`; }
    function renderMarketEvents() { marketEventsList.innerHTML = ''; if (gameState.marketEvents.length === 0) { marketEventsList.innerHTML = '<p>Nenhum evento de mercado no momento.</p>'; return; } gameState.marketEvents.forEach(event => { const eventClass = event.modifier > 1 ? 'event-positive' : 'event-negative'; const hoursLeft = event.endHour - gameState.totalHours; marketEventsList.innerHTML += `<div class="card ${eventClass}"><h4>${event.title}</h4><p>${event.description}</p><small>Tempo restante: ${Math.ceil(hoursLeft/24)} dias</small></div>`; }); }
    function renderStaffPage() { const totalPilots = gameState.staff.pilots.length; const totalCrew = gameState.staff.crew.length; const monthlySalaries = gameState.staff.pilots.reduce((acc, p) => acc + p.salary, 0) + gameState.staff.crew.reduce((acc, c) => acc + c.salary, 0); staffSummary.innerHTML = `<span><i class="fas fa-user-tie"></i> Pilotos: ${totalPilots}</span> <span><i class="fas fa-user-friends"></i> Comissários: ${totalCrew}</span> <span class="cost"><i class="fas fa-dollar-sign"></i> Salários/Mês: ${formatCurrency(monthlySalaries)}</span>`; myStaffList.innerHTML = ''; if (totalPilots === 0 && totalCrew === 0) { myStaffList.innerHTML = '<p>Você ainda não contratou ninguém.</p>'; } [...gameState.staff.pilots, ...gameState.staff.crew].forEach(staff => { myStaffList.innerHTML += `<div class="card"><h3>${staff.name}</h3><div class="card-details"><span>Cargo: ${staff.type === 'pilot' ? 'Piloto' : 'Comissário(a)'}</span><span>Habilidade: ${staff.skill}</span><span>Salário: ${formatCurrency(staff.salary)}/mês</span></div><div class="status ${staff.status === 'ocioso' ? 'status-idle' : 'status-flying'}">${staff.status}</div></div>`; }); hireStaffList.innerHTML = ''; STAFF_MARKET.forEach(staff => { const isHired = gameState.staff.pilots.some(s => s.id === staff.id) || gameState.staff.crew.some(s => s.id === staff.id); hireStaffList.innerHTML += `<div class="card"><h3>${staff.name}</h3><p>Cargo: ${staff.type === 'pilot' ? 'Piloto' : 'Comissário(a)'}<br>Habilidade: ${staff.skill}</p><div class="price">Salário: ${formatCurrency(staff.salary)}/mês</div><button class="btn hire-staff-btn" data-staff-id="${staff.id}" ${isHired ? 'disabled' : ''}>${isHired ? 'Contratado' : 'Contratar'}</button></div>`; }); }
    function renderUpgradesPage() { upgradesList.innerHTML = ''; UPGRADES_DATA.forEach(upgrade => { const isPurchased = gameState.upgrades[upgrade.id]; upgradesList.innerHTML += `<div class="card"><h3>${upgrade.name}</h3><p>${upgrade.description}</p><div class="price">${isPurchased ? 'Comprado!' : `Custo: ${formatCurrency(upgrade.cost)}`}</div><button class="btn buy-upgrade-btn" data-upgrade-id="${upgrade.id}" ${isPurchased || gameState.money < upgrade.cost ? 'disabled' : ''}>Comprar Upgrade</button></div>`; }); }
    function renderHistoryPage() { let tableHTML = `<table class="styled-table"><thead><tr><th>Rota</th><th>Aeronave</th><th>Passageiros</th><th>Receita</th><th>Combustível</th><th>Lucro</th></tr></thead><tbody>`; if (gameState.flightHistory.length === 0) { tableHTML += '<tr><td colspan="6" style="text-align:center;">Nenhum voo concluído ainda.</td></tr>'; } else { [...gameState.flightHistory].reverse().forEach(flight => { const profitClass = flight.profit >= 0 ? 'profit-positive' : 'profit-negative'; tableHTML += `<tr><td>${flight.route}</td><td>${flight.plane}</td><td>${flight.passengers}</td><td>${formatCurrency(flight.revenue)}</td><td>${formatCurrency(flight.fuelCost)}</td><td class="${profitClass}">${formatCurrency(flight.profit)}</td></tr>`; }); } tableHTML += '</tbody></table>'; flightHistoryTable.innerHTML = tableHTML; }
    function renderCompetitors() { competitorList.innerHTML = ''; gameState.competitors.forEach(ai => { competitorList.innerHTML += `<div class="card"><h3>${ai.name}</h3><div class="card-details"><span><i class="fas fa-wallet"></i> ${formatCurrency(ai.money)}</span><span><i class="fas fa-plane"></i> Frota: ${ai.planes.length}</span></div><div class="competitor-routes"><strong>Rotas:</strong> ${ai.routes.length > 0 ? ai.routes.map(rId => rId.replace('-', '➔')).join(', ') : 'Nenhuma'}</div></div>`; }); }
    function logMessage(message, type = 'info') { const p = document.createElement('p'); p.innerHTML = `<strong>${getFormattedTime()}:</strong> ${message}`; p.className = type; logMessages.prepend(p); if (logMessages.children.length > 100) { logMessages.removeChild(logMessages.lastChild); } }
    function updateUI() { renderDashboard(); renderOverview(); renderFleet(); renderMarket(); renderRoutes(); renderHubs(); renderBank(); renderMarketEvents(); renderStaffPage(); renderUpgradesPage(); renderHistoryPage(); renderCompetitors(); renderAlliancesPage(); renderUsedMarket(); renderAirportsPage(); }

    // --- LÓGICA DE SALVAR/CARREGAR/REINICIAR ---
    async function saveGame() { const confirmed = await showConfirmation('Salvar Jogo', 'Você deseja sobrescrever seu progresso salvo?'); if (confirmed) { localStorage.setItem(SAVE_KEY, JSON.stringify(gameState)); logMessage("Progresso do jogo salvo com sucesso!", "success"); } }
    function loadGame() { const savedData = localStorage.getItem(SAVE_KEY); if (savedData) { const loadedState = JSON.parse(savedData); gameState = loadedState; logMessage("Jogo carregado com sucesso!", "success"); startGame(); } else { alert("Nenhum jogo salvo encontrado!"); } }
    function restartGame() { if (confirm("Você tem certeza que deseja reiniciar o jogo? Todo o seu progresso salvo será perdido permanentemente.")) { localStorage.removeItem(SAVE_KEY); location.reload(); } }

    // --- LÓGICA DO JOGO ---
    function calculateSatisfaction(routeState) { const priceRatio = routeState.ticketPrice / routeState.baseTicketPrice; let priceSatisfaction = (1.5 - priceRatio) / 0.7 * 100; priceSatisfaction = Math.max(0, Math.min(100, priceSatisfaction)); const planesOnRoute = gameState.activeFlights.filter(f => f.route.id === routeState.id).map(f => gameState.planes.find(p => p.id === f.planeId)).filter(p => p); let averageComfort = 50; if (planesOnRoute.length > 0) { averageComfort = planesOnRoute.reduce((acc, plane) => acc + plane.comfort, 0) / planesOnRoute.length; } let comfort = (priceSatisfaction * 0.6) + (averageComfort * 0.4); if (gameState.upgrades.premiumService) { comfort = Math.min(100, comfort + 10); } return Math.round(comfort); }
    function getMarketShare(routeState, competitorsOnRoute) { const playerSatisfaction = calculateSatisfaction(routeState); const totalCompetitiveness = playerSatisfaction + competitorsOnRoute.reduce((acc, ai) => acc + ai.competitiveness, 0); if (totalCompetitiveness === 0) return 1; return playerSatisfaction / totalCompetitiveness; }
    function triggerMarketEvent() { const potentialEvents = [ { title: "Conferência de Tecnologia", modifier: 1.5, durationDays: 7, city: "Miami" }, { title: "Festival de Música", modifier: 1.4, durationDays: 5, city: "Salvador" }, { title: "Crise Econômica Local", modifier: 0.7, durationDays: 15, city: "São Paulo" }, { title: "Feriado Prolongado", modifier: 1.2, durationDays: 4, city: "Rio de Janeiro" } ]; const eventData = potentialEvents[Math.floor(Math.random() * potentialEvents.length)]; const newEvent = { ...eventData, id: Date.now(), endHour: gameState.totalHours + (eventData.durationDays * 24), description: `A demanda de voos para/de ${eventData.city} será afetada.` }; gameState.marketEvents.push(newEvent); logMessage(`Novo evento de mercado: ${newEvent.title} em ${newEvent.city}!`, 'warning'); }
    async function buyPlane(name) { const planeData = AIRCRAFT_MARKET.find(p => p.name === name); if (planeData) { const confirmed = await showConfirmation('Confirmar Compra', `Você deseja comprar a aeronave <strong>${planeData.name}</strong> por <strong>${formatCurrency(planeData.price)}</strong>?`); if (confirmed && gameState.money >= planeData.price) { gameState.money -= planeData.price; gameState.planes.push({ ...planeData, id: ++planeIdCounter, status: 'idle', maintenanceTimer: 0, flightHours: 0, condition: 100 }); logMessage(`Aeronave ${name} comprada por ${formatCurrency(planeData.price)}.`, 'success'); updateUI(); } else if (confirmed) { logMessage(`Compra cancelada. Dinheiro insuficiente.`, 'error'); } } }
    async function buyUsedPlane(usedPlaneId) { const planeData = gameState.usedMarketPlanes.find(p => p.id === usedPlaneId); if (planeData) { const confirmed = await showConfirmation('Confirmar Compra', `Você deseja comprar a aeronave usada <strong>${planeData.name}</strong> por <strong>${formatCurrency(planeData.price)}</strong>?`); if (confirmed && gameState.money >= planeData.price) { gameState.money -= planeData.price; gameState.planes.push({ ...planeData, id: ++planeIdCounter, status: 'idle', maintenanceTimer: 0 }); gameState.usedMarketPlanes = gameState.usedMarketPlanes.filter(p => p.id !== usedPlaneId); logMessage(`Aeronave usada ${planeData.name} comprada.`, 'success'); updateUI(); } else if (confirmed) { logMessage(`Compra cancelada. Dinheiro insuficiente.`, 'error'); } } }
    async function sellPlane(planeId) { const plane = gameState.planes.find(p => p.id === planeId); if (plane) { const salePrice = Math.round(plane.price * (plane.condition / 100) * 0.7); const confirmed = await showConfirmation('Confirmar Venda', `Deseja vender <strong>${plane.name} (ID: ${plane.id})</strong> por <strong>${formatCurrency(salePrice)}</strong>?`); if (confirmed) { gameState.money += salePrice; gameState.planes = gameState.planes.filter(p => p.id !== planeId); logMessage(`${plane.name} vendido com sucesso.`, 'success'); updateUI(); } } }
    async function unlockRoute(id) { const routeData = AVAILABLE_ROUTES.find(r => r.id === id); if (routeData) { const confirmed = await showConfirmation('Confirmar Desbloqueio', `Você deseja desbloquear a rota <strong>${AIRPORTS[routeData.from].name} - ${AIRPORTS[routeData.to].name}</strong> por <strong>${formatCurrency(routeData.unlockCost)}</strong>?`); if (confirmed && gameState.money >= routeData.unlockCost) { gameState.money -= routeData.unlockCost; gameState.routes.push({ id: routeData.id, from: routeData.from, to: routeData.to, ticketPrice: routeData.baseTicketPrice, demand: routeData.baseDemand, baseTicketPrice: routeData.baseTicketPrice }); logMessage(`Rota ${AIRPORTS[routeData.from].name} - ${AIRPORTS[routeData.to].name} desbloqueada.`, 'success'); updateUI(); } else if (confirmed) { logMessage(`Desbloqueio cancelado. Dinheiro insuficiente.`, 'error'); } } }
    async function buySlot(airportId) { const airport = AIRPORTS[airportId]; if (airport) { const confirmed = await showConfirmation('Confirmar Compra de Slot', `Deseja comprar 1 slot de operação em <strong>${airport.name}</strong> por <strong>${formatCurrency(airport.slotCost)}</strong>?`); if (confirmed && gameState.money >= airport.slotCost) { gameState.money -= airport.slotCost; if (!gameState.airportSlots[airportId]) { gameState.airportSlots[airportId] = 0; } gameState.airportSlots[airportId]++; logMessage(`Slot comprado em ${airport.name}.`, 'success'); updateUI(); } else if (confirmed) { logMessage('Compra de slot cancelada. Dinheiro insuficiente.', 'error'); } } }
    async function joinAlliance(allianceId) { const alliance = ALLIANCES.find(a => a.id === allianceId); if(alliance) { const confirmed = await showConfirmation('Confirmar Adesão', `Deseja pagar <strong>${formatCurrency(alliance.fee)}</strong> para se juntar à <strong>${alliance.name}</strong>?`); if (confirmed && gameState.money >= alliance.fee) { gameState.money -= alliance.fee; gameState.allianceMember = alliance.id; logMessage(`Bem-vindo à ${alliance.name}!`, 'success'); updateUI(); } else if (confirmed) { logMessage('Adesão cancelada. Dinheiro insuficiente.', 'error'); } } }
    async function unlockHub(hubTo, cost) { const confirmed = await showConfirmation('Confirmar Novo Hub', `Você deseja estabelecer um novo hub em <strong>${hubTo}</strong> por <strong>${formatCurrency(cost)}</strong>?`); if (confirmed && gameState.money >= cost) { gameState.money -= cost; gameState.hubs.push(hubTo); logMessage(`Novo hub estabelecido em ${hubTo}!`, 'success'); updateUI(); } else if (confirmed) { logMessage(`Estabelecimento de hub cancelado. Dinheiro insuficiente.`, 'error'); } }
    async function takeLoan(loanId) { const loanData = LOAN_OPTIONS.find(l => l.id === loanId); if (loanData && !gameState.loans.some(l => l.loanId === loanData.id)) { const confirmed = await showConfirmation('Confirmar Empréstimo', `Você deseja pegar um empréstimo de <strong>${formatCurrency(loanData.amount)}</strong> com prazo de ${loanData.termDays} dias?`); if (confirmed) { gameState.money += loanData.amount; const totalInterest = loanData.amount * loanData.dailyInterestRate * loanData.termDays; const totalPayment = loanData.amount + totalInterest; gameState.loans.push({ id: ++loanIdCounter, loanId: loanData.id, remainingAmount: totalPayment, dailyPayment: totalPayment / loanData.termDays, originalAmount: loanData.amount, }); logMessage(`Empréstimo de ${formatCurrency(loanData.amount)} recebido!`, 'success'); updateUI(); } } }
    async function hireStaff(staffId) { const staffData = STAFF_MARKET.find(s => s.id === staffId); if (staffData) { const confirmed = await showConfirmation('Confirmar Contratação', `Deseja contratar <strong>${staffData.name}</strong> (${staffData.skill}) por um salário de <strong>${formatCurrency(staffData.salary)}/mês</strong>?`); if (confirmed) { const newStaff = { ...staffData, personalId: ++staffIdCounter, status: 'ocioso' }; if (staffData.type === 'pilot') { gameState.staff.pilots.push(newStaff); } else { gameState.staff.crew.push(newStaff); } logMessage(`${staffData.name} foi contratado(a).`, 'success'); updateUI(); } } }
    async function buyUpgrade(upgradeId) { const upgradeData = UPGRADES_DATA.find(u => u.id === upgradeId); if (upgradeData) { const confirmed = await showConfirmation('Confirmar Upgrade', `Deseja comprar o upgrade <strong>${upgradeData.name}</strong> por <strong>${formatCurrency(upgradeData.cost)}</strong>?`); if (confirmed && gameState.money >= upgradeData.cost) { gameState.money -= upgradeData.cost; gameState.upgrades[upgradeId] = true; logMessage(`Upgrade "${upgradeData.name}" comprado!`, 'success'); updateUI(); } else if (confirmed) { logMessage(`Compra de upgrade cancelada. Dinheiro insuficiente.`, 'error'); } } }
    function startFlight(planeId, routeId) { const plane = gameState.planes.find(p => p.id === planeId); const route = gameState.routes.find(r => r.id === routeId); const routeData = AVAILABLE_ROUTES.find(r => r.id === routeId); const originSlotsOwned = gameState.airportSlots[routeData.from] || 0; const destSlotsOwned = gameState.airportSlots[routeData.to] || 0; const originSlotsUsed = gameState.activeFlights.filter(f => f.route.from === routeData.from).length; const destSlotsUsed = gameState.activeFlights.filter(f => f.route.to === routeData.to).length; if (originSlotsOwned <= originSlotsUsed) { logMessage(`Sem slots de partida disponíveis em ${AIRPORTS[routeData.from].name}.`, 'error'); return; } if (destSlotsOwned <= destSlotsUsed) { logMessage(`Sem slots de chegada disponíveis em ${AIRPORTS[routeData.to].name}.`, 'error'); return; } const planeReqs = AIRCRAFT_REQUIREMENTS[plane.name]; const availablePilots = gameState.staff.pilots.filter(p => p.status === 'ocioso'); const availableCrew = gameState.staff.crew.filter(c => c.status === 'ocioso'); if (availablePilots.length < planeReqs.pilots) { logMessage(`Não há pilotos suficientes disponíveis para operar o ${plane.name}.`, 'error'); return; } if (availableCrew.length < planeReqs.crew) { logMessage(`Não há comissários suficientes disponíveis para o ${plane.name}.`, 'error'); return; } const durationInHours = Math.ceil(routeData.distance / plane.speed); const assignedPilots = availablePilots.slice(0, planeReqs.pilots); const assignedCrew = availableCrew.slice(0, planeReqs.crew); assignedPilots.forEach(p => p.status = 'em-voo'); assignedCrew.forEach(c => c.status = 'em-voo'); plane.status = 'flying'; gameState.activeFlights.push({ planeId: plane.id, route: route, startHour: gameState.totalHours, endHour: gameState.totalHours + durationInHours, durationInHours: durationInHours, pilotIds: assignedPilots.map(p => p.personalId), crewIds: assignedCrew.map(c => c.personalId) }); logMessage(`${plane.name} (ID: ${plane.id}) iniciou voo para ${AIRPORTS[route.to].name}.`, 'info'); updateUI(); }
    function triggerRandomEvent() { const idlePlanes = gameState.planes.filter(p => p.status === 'idle'); if (idlePlanes.length > 0 && Math.random() < 0.2) { let costMultiplier = gameState.upgrades.advancedMaintenance ? 0.8 : 1.0; let durationMultiplier = gameState.upgrades.advancedMaintenance ? 0.8 : 1.0; const planeToFix = idlePlanes[Math.floor(Math.random() * idlePlanes.length)]; const maintenanceDurationInHours = Math.round((Math.floor(Math.random() * 3) + 2) * 24 * durationMultiplier); const repairCost = Math.round(planeToFix.price * 0.01 * costMultiplier); if (gameState.money >= repairCost) { planeToFix.status = 'maintenance'; planeToFix.maintenanceTimer = maintenanceDurationInHours; gameState.money -= repairCost; gameState.reputation = Math.max(0, gameState.reputation - 2); logMessage(`${planeToFix.name} (ID: ${planeToFix.id}) precisa de manutenção! Custo: ${formatCurrency(repairCost)}.`, 'warning'); } } }
    function updateAI(ai) { ai.money += ai.planes.length * 2000; const targetRoute = gameState.routes.find(r => !ai.routes.includes(r.id)); if (targetRoute && ai.money > AVAILABLE_ROUTES.find(ar=>ar.id === targetRoute.id).unlockCost && Math.random() < ai.expansionAggressiveness) { ai.money -= AVAILABLE_ROUTES.find(ar=>ar.id === targetRoute.id).unlockCost; ai.routes.push(targetRoute.id); logMessage(`Concorrência: ${ai.name} agora opera na rota ${AIRPORTS[targetRoute.from].name} ➔ ${AIRPORTS[targetRoute.to].name}!`, 'warning'); } const unservedRoutes = ai.routes.length - ai.planes.length; if (unservedRoutes > 0 && ai.money > 500000) { const affordablePlanes = AIRCRAFT_MARKET.filter(p => p.price <= ai.money && p.price < 1000000); if (affordablePlanes.length > 0) { const planeToBuy = affordablePlanes[Math.floor(Math.random() * affordablePlanes.length)]; ai.money -= planeToBuy.price; ai.planes.push({ name: planeToBuy.name }); logMessage(`Concorrência: ${ai.name} adquiriu uma nova aeronave ${planeToBuy.name}.`, 'warning'); } } }
    function updateUsedMarket() { if (gameState.totalHours % (24 * 3) === 0) { gameState.usedMarketPlanes = []; const numForSale = Math.floor(Math.random() * 3) + 2; for (let i = 0; i < numForSale; i++) { const planeTemplate = AIRCRAFT_MARKET[Math.floor(Math.random() * AIRCRAFT_MARKET.length)]; const flightHours = Math.floor(Math.random() * 10000) + 500; const condition = 100 - (flightHours / 200) - (Math.random() * 10); const price = Math.round(planeTemplate.price * (condition / 100) * 0.8); gameState.usedMarketPlanes.push({ ...planeTemplate, id: ++usedPlaneIdCounter, flightHours: flightHours, condition: Math.max(10, condition), price: price, }); } } }
    function gameTick() { gameState.totalHours++; if (gameState.totalHours % 30 === 0) { updateNewsTicker(); } if (gameState.totalHours > 0 && gameState.totalHours % 24 === 0) { gameState.competitors.forEach(updateAI); updateUsedMarket(); let totalMaintenance = 0; gameState.planes.forEach(plane => totalMaintenance += plane.maintenance); if (totalMaintenance > 0) { gameState.money -= totalMaintenance; gameState.financials.expenses.maintenance += totalMaintenance; } if (gameState.totalHours % (24 * 30) === 0) { const totalSalaries = gameState.staff.pilots.reduce((acc, p) => acc + p.salary, 0) + gameState.staff.crew.reduce((acc, c) => acc + c.salary, 0); if (totalSalaries > 0) { gameState.money -= totalSalaries; gameState.financials.expenses.salaries += totalSalaries; logMessage(`Salários do mês pagos: ${formatCurrency(totalSalaries)}`, 'error'); } } gameState.loans.forEach(loan => { const loanInfo = LOAN_OPTIONS.find(l => l.id === loan.loanId); const interestForDay = loan.remainingAmount * loanInfo.dailyInterestRate; gameState.money -= loan.dailyPayment; loan.remainingAmount -= loan.dailyPayment; gameState.financials.expenses.interest += interestForDay; }); const paidLoans = gameState.loans.filter(l => l.remainingAmount <= 1); if (paidLoans.length > 0) { paidLoans.forEach(paidLoan => { logMessage(`Empréstimo de ${formatCurrency(paidLoan.originalAmount)} foi totalmente pago!`, 'success'); }); gameState.loans = gameState.loans.filter(l => l.remainingAmount > 1); } gameState.routes.forEach(route => { const satisfaction = calculateSatisfaction(route); if (satisfaction < 30) { route.demand = Math.max(0.2, route.demand * 0.98); gameState.reputation = Math.max(0, gameState.reputation - 0.1); } else if (satisfaction > 75) { route.demand = Math.min(2.5, route.demand * 1.01); gameState.reputation = Math.min(200, gameState.reputation + 0.05); } }); } if (gameState.totalHours >= gameState.nextEventCheck) { triggerMarketEvent(); triggerRandomEvent(); gameState.nextEventCheck += (Math.floor(Math.random() * 10) + 10) * 24; } gameState.marketEvents = gameState.marketEvents.filter(e => e.endHour > gameState.totalHours); gameState.planes.filter(p => p.status === 'maintenance').forEach(plane => { plane.maintenanceTimer--; if (plane.maintenanceTimer <= 0) { plane.status = 'idle'; logMessage(`${plane.name} (ID: ${plane.id}) está pronto para voar novamente.`, 'info'); } }); const completedFlights = []; gameState.activeFlights.forEach(flight => { if (gameState.totalHours >= flight.endHour) { const plane = gameState.planes.find(p => p.id === flight.planeId); if (plane) { plane.status = 'idle'; plane.flightHours += flight.durationInHours; plane.condition -= flight.durationInHours / 20; if (plane.condition < 0) plane.condition = 0; flight.pilotIds.forEach(id => { const pilot = gameState.staff.pilots.find(p => p.personalId === id); if(pilot) pilot.status = 'ocioso'; }); flight.crewIds.forEach(id => { const crew = gameState.staff.crew.find(c => c.personalId === id); if(crew) crew.status = 'ocioso'; }); const route = flight.route; const event = gameState.marketEvents.find(e => e.city === AIRPORTS[route.to].name || e.city === AIRPORTS[route.from].name); const demandModifier = event ? event.modifier : 1.0; const competitorsOnRoute = gameState.competitors.filter(c => c.routes.includes(route.id)); const marketShare = getMarketShare(route, competitorsOnRoute); const totalDemand = (route.demand * demandModifier) * 150; const availablePassengers = Math.floor(totalDemand * marketShare); const passengers = Math.min(plane.capacity, availablePassengers); const fuelMultiplier = gameState.upgrades.fuelEfficiency ? 0.95 : 1.0; const fuelCost = AVAILABLE_ROUTES.find(r => r.id === route.id).distance * plane.fuelPerKm * fuelMultiplier; const revenue = passengers * route.ticketPrice * (gameState.hubs.includes(route.from) ? HUB_BONUS : 1.0); let landingFee = AIRPORTS[route.to].landingFee; if (gameState.allianceMember && AIRPORTS[route.to].hubAlliance === gameState.allianceMember) { landingFee *= 0.5; } gameState.money -= landingFee; gameState.financials.expenses.landingFees += landingFee; const profit = revenue - fuelCost - landingFee; gameState.money += revenue; gameState.money -= fuelCost; gameState.financials.revenue += revenue; gameState.financials.expenses.fuel += fuelCost; gameState.reputation = Math.min(200, gameState.reputation + 0.5); logMessage(`Voo para ${AIRPORTS[route.to].name} concluído com ${passengers} passageiros. Receita: ${formatCurrency(revenue)}.`, 'success'); gameState.flightHistory.push({ route: `${AIRPORTS[route.from].name} ➔ ${AIRPORTS[route.to].name}`, plane: plane.name, passengers: passengers, revenue: revenue, fuelCost: fuelCost, profit: profit }); if (gameState.flightHistory.length > 100) { gameState.flightHistory.shift(); } completedFlights.push(flight); } } }); gameState.activeFlights = gameState.activeFlights.filter(f => !completedFlights.includes(f)); updateUI(); }
    function openAssignModal(routeId) { const route = gameState.routes.find(r => r.id === routeId); modalRouteName.textContent = `${AIRPORTS[route.from].name} ➔ ${AIRPORTS[route.to].name}`; modalAvailablePlanes.innerHTML = ''; const idlePlanes = gameState.planes.filter(p => p.status === 'idle' && p.range >= AVAILABLE_ROUTES.find(r => r.id === routeId).distance); assignFlightRequirements.innerHTML = ''; if (idlePlanes.length > 0) { idlePlanes.forEach(plane => { const planeDiv = document.createElement('div'); planeDiv.className = 'plane-option'; planeDiv.textContent = `${plane.name} (ID: ${plane.id}) - Conforto: ${plane.comfort}`; planeDiv.onclick = () => { startFlight(plane.id, routeId); assignFlightModal.style.display = "none"; }; modalAvailablePlanes.appendChild(planeDiv); }); } else { modalAvailablePlanes.innerHTML = '<p>Nenhum avião adequado está disponível.</p>'; } assignFlightModal.style.display = 'block'; }
    function openAssignRouteModal(planeId) { const plane = gameState.planes.find(p => p.id === planeId); if (!plane) return; modalPlaneName.textContent = `${plane.name} (ID: ${plane.id})`; modalAvailableRoutes.innerHTML = ''; const compatibleRoutes = gameState.routes.filter(route => plane.range >= AVAILABLE_ROUTES.find(r => r.id === route.id).distance); if (compatibleRoutes.length > 0) { compatibleRoutes.forEach(route => { const routeDiv = document.createElement('div'); routeDiv.className = 'route-option'; const routeData = AVAILABLE_ROUTES.find(r => r.id === route.id); routeDiv.innerHTML = `<span>${AIRPORTS[route.from].name} ➔ ${AIRPORTS[route.to].name}</span><div class="route-option-details">Dist: ${routeData.distance}km | Preço: ${formatCurrency(route.ticketPrice)}</div>`; routeDiv.onclick = () => { startFlight(plane.id, route.id); assignRouteModal.style.display = "none"; }; modalAvailableRoutes.appendChild(routeDiv); }); } else { modalAvailableRoutes.innerHTML = '<p>Nenhuma rota desbloqueada é compatível com o alcance deste avião.</p>'; } assignRouteModal.style.display = 'block'; }
    function updateNewsTicker() { const newsItem = NEWS_TICKER_DATA[Math.floor(Math.random() * NEWS_TICKER_DATA.length)]; newsTickerText.textContent = newsItem; }

    // --- INICIALIZAÇÃO E EVENTOS ---
    function startGame() { gameWrapper.style.visibility = 'visible'; mainMenuModal.style.display = 'none'; newGameModal.style.display = 'none'; if (gameInterval) { clearInterval(gameInterval); } gameInterval = setInterval(gameTick, 5000); updateUI(); updateNewsTicker(); }
    document.body.addEventListener('click', (e) => { if (e.target.matches('.buy-plane-btn')) { buyPlane(e.target.dataset.planeName); } if (e.target.matches('.unlock-btn')) { unlockRoute(e.target.dataset.routeId); } if (e.target.matches('.assign-btn')) { openAssignModal(e.target.dataset.routeId); } if (e.target.matches('.unlock-hub-btn')) { unlockHub(e.target.dataset.hubTo, parseInt(e.target.dataset.cost)); } if (e.target.matches('.take-loan-btn')) { takeLoan(parseInt(e.target.dataset.loanId)); } if (e.target.matches('.change-price-btn')) { const routeId = e.target.dataset.routeId; const amount = parseInt(e.target.dataset.amount); const route = gameState.routes.find(r => r.id === routeId); if (route) { route.ticketPrice = Math.max(0, route.ticketPrice + amount); renderRoutes(); } } if (e.target.matches('.btn-assign-from-fleet')) { openAssignRouteModal(parseInt(e.target.dataset.planeId)); } if (e.target.matches('.hire-staff-btn')) { hireStaff(parseInt(e.target.dataset.staffId)); } if (e.target.matches('.buy-upgrade-btn')) { buyUpgrade(e.target.dataset.upgradeId); } if (e.target.matches('.sell-plane-btn')) { sellPlane(parseInt(e.target.dataset.planeId)); } if (e.target.matches('.buy-used-plane-btn')) { buyUsedPlane(parseInt(e.target.dataset.usedPlaneId)); } if (e.target.matches('.buy-slot-btn')) { buySlot(e.target.dataset.airportId); } if (e.target.matches('.join-alliance-btn')) { joinAlliance(e.target.dataset.allianceId); } });
    tabButtons.forEach(button => { button.addEventListener('click', () => { const panel = button.closest('.game-panel'); const targetContentId = button.dataset.tab; panel.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active')); button.classList.add('active'); panel.querySelectorAll('.tab-content').forEach(content => { content.classList.toggle('active', content.id === targetContentId); }); }); });
    navLinks.forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); const pageId = link.dataset.page; navLinks.forEach(l => l.classList.remove('active')); link.classList.add('active'); pages.forEach(p => p.classList.remove('active')); document.getElementById(`${pageId}-page`).classList.add('active'); }); });
    const closeButtons = document.querySelectorAll('.close-button');
    closeButtons.forEach(btn => { btn.onclick = () => { financeReportModal.style.display = "none"; assignFlightModal.style.display = "none"; assignRouteModal.style.display = "none"; confirmationModal.style.display = "none";}; });
    openFinanceReportBtn.addEventListener('click', () => { renderFinanceReport(); financeReportModal.style.display = 'block'; });
    saveGameBtn.addEventListener('click', saveGame);
    restartGameBtn.addEventListener('click', restartGame);
    continueGameBtn.addEventListener('click', loadGame);
    newGameBtn.addEventListener('click', () => { mainMenuModal.style.display = 'none'; newGameModal.style.display = 'flex'; });
    startGameBtn.addEventListener('click', () => { const name = companyNameInput.value.trim(); if (name) { gameState = createInitialGameState(); gameState.companyName = name; gameState.competitors = JSON.parse(JSON.stringify(COMPETITORS_DATA)); logMessage(`A companhia aérea "${gameState.companyName}" foi fundada!`, 'success'); startGame(); } else { alert("Por favor, insira um nome para a sua companhia."); } });
    window.onclick = (event) => { if (event.target == assignFlightModal || event.target == financeReportModal || event.target == assignRouteModal || event.target == confirmationModal) { assignFlightModal.style.display = "none"; financeReportModal.style.display = "none"; assignRouteModal.style.display = "none"; confirmationModal.style.display = "none";} };
    if (localStorage.getItem(SAVE_KEY)) { continueGameBtn.disabled = false; }
});